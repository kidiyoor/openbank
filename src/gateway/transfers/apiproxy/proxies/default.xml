<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
    <FaultRules>
        <FaultRule name="InvalidClientID">
            <Step>
                <Condition>verifyapikey.Authorize-Client-Application.failed = true</Condition>
                <Name>Error-Invalid-client_id</Name>
                <FaultRules/>
            </Step>
        </FaultRule>
    </FaultRules>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Condition>request.verb = "OPTIONS"</Condition>
                <Name>Cors-Preflighted</Name>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
    <Flows>
        <Flow name="initiateTransfer">
            <Description/>
            <Request>
                <Step>
                    <Name>Validate-Request</Name>
                </Step>
                <Step>
                    <Name>OAuth.VerifyAccessToken</Name>
                    <Condition>request.header.Authorization Matches "Bearer*"</Condition>
                </Step>
                <Step>
                    <Condition>(error_type != null And error_type != "")</Condition>
                    <Name>Error-Invalid-request</Name>
                </Step>
                <Step>
                    <Name>Authorize-Client-Application</Name>
                </Step>
                <Step>
                    <Name>Get-API-Product-Scopes</Name>
                </Step>
                <Step>
                    <Name>Security-AuthorizeGet-Client-Attributes</Name>
                </Step>
                <Step>
                    <Name>Ext-Validate-request-parameters</Name>
                </Step>
                <Step>
                    <Condition>(error_type != null And error_type = "invalid_redirect_uri")</Condition>
                    <Name>Error-Invalid-request</Name>
                </Step>
                <Step>
                    <Condition>(error_variable != null)</Condition>
                    <Name>Invalid-Authorization-Request</Name>
                </Step>
                <Step>
                    <Condition>nonce != null and nonce != ""</Condition>
                    <Name>Nonce-Replay-Attack-Validation</Name>
                </Step>
                <Step>
                    <Condition>nonce_cache_value != null</Condition>
                    <Name>Assign-Replay-Attach-Error</Name>
                </Step>
                <Step>
                    <Condition>(error_variable != null)</Condition>
                    <Name>Invalid-Authorization-Request</Name>
                </Step>
                <Step>
                    <Condition>nonce != null and nonce != ""</Condition>
                    <Name>Populate-Nonce-Information</Name>
                </Step>
                <Step>
                    <Name>Create-Application-Session</Name>
                </Step>
                <Step>
                    <Name>Store-Application-Session</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>grant_type != "client_credentials"</Condition>
                    <Name>Assign.RedirectConsentApp</Name>
                </Step>
                <Step>
                    <Condition>grant_type = "client_credentials"</Condition>
                    <Name>Callout-Complete-Transfer</Name>
                </Step>
                <Step>
                    <Condition>grant_type = "client_credentials"</Condition>
                    <Name>Ext-Fetch-Transfer-Response</Name>
                </Step>
                <Step>
                    <Condition>grant_type = "client_credentials"</Condition>
                    <Name>Assign_Transfer_Response</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/initiate")</Condition>
        </Flow>
        <Flow name="doTransfer">
            <Condition>(request.verb = "POST") and (proxy.pathsuffix MatchesPath "/complete/*")</Condition>
            <Request>
                <Step>
                    <Name>Extract-Transaction-session-id</Name>
                </Step>
                <Step>
                    <Condition>auth.transaction.session.id != null and auth.transaction.session.id != ""</Condition>
                    <Name>Get-Application-Session</Name>
                </Step>
                <Step>
                    <Condition>(auth.transaction.session.id = null or rauth.transaction.session.id = "") or (session.Payload = null) or (session.Payload = "")</Condition>
                    <Name>Error-Response-Invalid-Session</Name>
                </Step>
                <Step>
                    <Name>Extract-Application-Session-information</Name>
                </Step>
                <Step>
                    <!--<Condition>response_type_id_token = true</Condition>-->
                    <Name>Get-Application-Attributes</Name>
                </Step>
                <Step>
                    <Name>Assign-JWT-Payload</Name>
                </Step>
                <Step>
                    <Name>Assign.TransferDetails</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>Extract.TransferDetails</Name>
                </Step>
                <Step>
                    <Name>Ext-Construct-Response</Name>
                </Step>
                <Step>
                    <Name>Assign-Consent-Application-TX-Response</Name>
                </Step>
            </Response>
        </Flow>
        <Flow name="DefaultFlow">
            <Description/>
            <Request>
                <Step>
                    <Name>Error-Operation-Unavailable</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response/>
    </PostFlow>
    <HTTPProxyConnection>
        <BasePath>/apis/v1/transfers</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
        <Condition>(proxy.pathsuffix MatchesPath "/complete/*")</Condition>
    </RouteRule>
    <RouteRule name="noroute"/>
</ProxyEndpoint>
